extends CharacterBody2D

@export var gravity = 30
@export var speed = 800
@export var acc = 70
@export var decell = 70
@export var air_acc = 10
@export var air_decell = 10
@export var jump_velocity = -1000
@export var wall_slide_speed = 10
@export var wall_pushback = 200
@export var max_jumps = 2
var current_jumps = 1
@export var wall_slide_gravity = 100
var is_wall_sliding = false

#combines all player movement functions
func _physics_process(delta):
	#picks up direction input
	var input_dir: Vector2 = input()
	#applies speed to direction
	if input_dir != Vector2.ZERO:
		accelerate(input_dir)
		
	#slows down when input is released
	else:
		add_friction()
		
	player_movement()
	jump()
	wall_slide(delta)
	
func player_movement():
	move_and_slide()
	
#gets direction
func input() -> Vector2:
	var input_dir = Vector2.ZERO
	
	input_dir.x = Input.get_axis("move_left", "move_right")
	input_dir = input_dir.normalized()
	return input_dir

#applies acceleration (no direction)
func accelerate(direction):
	velocity = velocity.move_toward(speed * direction, acc)
#applies friction when input is released
func add_friction():
	velocity = velocity.move_toward(Vector2.ZERO, decell)
	
	#applied jump, double jump, and wall jump
func jump():
	#applies gravity
	velocity.y += gravity 
	#input = jump
	if Input.is_action_just_pressed("jump"):
		if current_jumps < max_jumps:
			velocity.y = jump_velocity
			current_jumps = current_jumps + 1
			
	if is_on_floor():
		current_jumps = 1
	if is_on_wall():
		current_jumps = 1
	#handles jump if holding into wall and input jump pressed
	if is_on_wall() and Input.is_action_pressed("move_left") and Input.is_action_just_pressed("jump"):
		velocity.y = jump_velocity
		velocity.x = wall_pushback
	if is_on_wall() and Input.is_action_pressed("move_right") and Input.is_action_just_pressed("jump"):
		velocity.y = jump_velocity
		velocity.x = -wall_pushback
		
#handles wall slide
func wall_slide(delta):
	#grabs holding into wall input and sets var to true
	if is_on_wall() and !is_on_floor():
		if Input.is_action_pressed("move_left") or Input.is_action_pressed("move_right"):
			is_wall_sliding = true
		else:
			is_wall_sliding = false
	else:
		is_wall_sliding = false
	#modifies gravity when holding in
	if is_wall_sliding:
		velocity.y += wall_slide_gravity * delta
		velocity.y = min(velocity.y, wall_slide_gravity)
	#modified gravity again when holding down input to increase fall speed
	if is_wall_sliding and Input.is_action_pressed("move_down"):
		velocity.y += 100 * wall_slide_gravity * delta
